// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    //if A instruction-> intM[15]=0
    //			 intM[0..14]=address
    //if C instruction-> intM[15]=1
    //			 intM[0..2]=jump bits
    //			 intM[3..5]=destination bits
    //			 intM[6..12]=comp bits

    // instruction described:    

    //15      12 11...6    5    4    3    2    1    0
    // i  xx  a  ccc ccc  d1   d2   d3   j1   j2   j3
    //store data in:       A    D    M    
    //jump if enter value is __ 0:        <    =    >


    //--------A Register-----------
    // A is activated only when intM[15]=0 or intM[5]=1
    Not(in=intM[15], out=Ainstr);
    Or(a = Ainstr, b=intM[5], out=writeA);
    
    //--------D Register-----------
    // D is activated only when intM[4]=1
    And(a=true, b=intM[4], out=writeD);

    //--------M Register-----------
    // M is activated only when intM[3]=1
    And(a=true, b=intM[4], out=writeM);

    Mux16(a=ALUout, b=instruction, sel=?, out=newA);

    Mux16(a=newA, b=intM, sel=??, out=ALUin);

    PC(in=newA, load=??, inc=1,reset=reset);
 






















}